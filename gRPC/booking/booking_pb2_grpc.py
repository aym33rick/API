# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import booking_pb2 as booking__pb2


class BookingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetListBooking = channel.unary_stream(
                '/Booking/GetListBooking',
                request_serializer=booking__pb2.EmptyBooking.SerializeToString,
                response_deserializer=booking__pb2.BookingData.FromString,
                )
        self.GetBookingByUserID = channel.unary_stream(
                '/Booking/GetBookingByUserID',
                request_serializer=booking__pb2.BookingUserID.SerializeToString,
                response_deserializer=booking__pb2.BookingData.FromString,
                )
        self.PostBooking = channel.unary_unary(
                '/Booking/PostBooking',
                request_serializer=booking__pb2.BookingData.SerializeToString,
                response_deserializer=booking__pb2.EmptyBooking.FromString,
                )
        self.PutBooking = channel.unary_unary(
                '/Booking/PutBooking',
                request_serializer=booking__pb2.BookingData.SerializeToString,
                response_deserializer=booking__pb2.EmptyBooking.FromString,
                )
        self.DeleteBooking = channel.unary_unary(
                '/Booking/DeleteBooking',
                request_serializer=booking__pb2.BookingData.SerializeToString,
                response_deserializer=booking__pb2.EmptyBooking.FromString,
                )


class BookingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetListBooking(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBookingByUserID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PostBooking(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutBooking(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteBooking(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BookingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetListBooking': grpc.unary_stream_rpc_method_handler(
                    servicer.GetListBooking,
                    request_deserializer=booking__pb2.EmptyBooking.FromString,
                    response_serializer=booking__pb2.BookingData.SerializeToString,
            ),
            'GetBookingByUserID': grpc.unary_stream_rpc_method_handler(
                    servicer.GetBookingByUserID,
                    request_deserializer=booking__pb2.BookingUserID.FromString,
                    response_serializer=booking__pb2.BookingData.SerializeToString,
            ),
            'PostBooking': grpc.unary_unary_rpc_method_handler(
                    servicer.PostBooking,
                    request_deserializer=booking__pb2.BookingData.FromString,
                    response_serializer=booking__pb2.EmptyBooking.SerializeToString,
            ),
            'PutBooking': grpc.unary_unary_rpc_method_handler(
                    servicer.PutBooking,
                    request_deserializer=booking__pb2.BookingData.FromString,
                    response_serializer=booking__pb2.EmptyBooking.SerializeToString,
            ),
            'DeleteBooking': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteBooking,
                    request_deserializer=booking__pb2.BookingData.FromString,
                    response_serializer=booking__pb2.EmptyBooking.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Booking', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Booking(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetListBooking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Booking/GetListBooking',
            booking__pb2.EmptyBooking.SerializeToString,
            booking__pb2.BookingData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBookingByUserID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Booking/GetBookingByUserID',
            booking__pb2.BookingUserID.SerializeToString,
            booking__pb2.BookingData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PostBooking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Booking/PostBooking',
            booking__pb2.BookingData.SerializeToString,
            booking__pb2.EmptyBooking.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PutBooking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Booking/PutBooking',
            booking__pb2.BookingData.SerializeToString,
            booking__pb2.EmptyBooking.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteBooking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Booking/DeleteBooking',
            booking__pb2.BookingData.SerializeToString,
            booking__pb2.EmptyBooking.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
